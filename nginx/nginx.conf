#user www-data;
worker_processes 4;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    ##
    # Basic Settings
    ##

    merge_slashes off;
    sendfile off;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    uwsgi_cache_path /rangecache  levels=1:2  keys_zone=DEF:30m max_size=10G;
    proxy_cache_path /webcache    levels=1:2  keys_zone=WEB:10m max_size=20G;
    proxy_cache_path /warccache   levels=1:2  keys_zone=WARC:60m max_size=20G;

    uwsgi_buffer_size 64k;
    uwsgi_buffers 16 64k;
    uwsgi_busy_buffers_size 64k;

    uwsgi_request_buffering off;
    uwsgi_buffering off;

    client_max_body_size 0;

    upstream webrec_app {
        server app:8081;
    }

    upstream shepherd_app {
        server shepherd:9021;
    }

    # Content Server
    server {
        listen 81;

        set $upstreamp webrec_app;

        include webrec.conf;
    }

    # API Server
    server {
        listen 80;

        client_max_body_size 0;

        location / {
            proxy_pass http://frontend:8095;
        }

        location /admin {
            alias /code/webrecorder/static/admin-static;
            try_files $uri /admin/index.html;
        }

        location ~ ^/api/browsers/(browsers|init_browser) {
            include uwsgi_params;

            uwsgi_pass shepherd_app;
        }

        location ~* ^/(api|_new|_client_ws|_set_session) {
            include uwsgi_params;
            uwsgi_pass webrec_app;

            uwsgi_param UWSGI_SCHEME $thescheme;
        }

        location ~* ^/(_upload.*|.*/\$download)$ {
            include uwsgi_params;
            uwsgi_pass webrec_app;

            uwsgi_read_timeout 3000s;
        }

        location /admin-static {
            root /code/webrecorder/static;
        }

        location /static/ {
            alias /frontend/static/dist/;
        }

        location /static/app {
            alias /code/webrecorder/static/;
        }

        location /static/browsers {
            include uwsgi_params;

            rewrite /static/browsers/(.*) /static/$1 break;

            uwsgi_pass shepherd_app;
        }
    }

    # Local WARC Serve
    server {
        listen 6090;

        location /data/warcs {
            alias /data/warcs;
        }

        location /data/storage {
            alias /data/storage;
        }
    }

    # reverse proxy for warcserver responses
    server {
        listen 1211;

        proxy_cache WARC;

        location / {
            proxy_cache_methods POST;
            proxy_cache_key "$request_uri|$request_body";
            proxy_cache_valid 200;

            proxy_pass http://warcserver:8080;
            proxy_buffer_size  128k;
            proxy_buffers 100  128k;

            client_max_body_size 1G;
        }
    }

    resolver 8.8.8.8;

    upstream ia {
        server 172.18.0.1:2006;
        server web.archive.org:80 max_conns=10 backup;
    }

    # forward proxy for memento requests
    server {
        listen 1210;

        proxy_cache WEB;

        proxy_pass_request_headers on;
        proxy_set_header Via Webrecorder;

        proxy_cache_key $http_accept_datetime$scheme$proxy_host$uri$is_args$args;
        proxy_buffer_size  128k;
        proxy_buffers 100  128k;

        proxy_cache_valid 200 302 301 304 307;
        proxy_cache_valid 404 5m;
        proxy_cache_valid any 1m;

        proxy_force_ranges on;

        proxy_ignore_headers Set-Cookie Vary X-Accel-Expires X-Accel-Buffering;
        add_header X-Proxy-Cache $upstream_cache_status;

        # to correctly handled encoded urls, use the unencoded $request_uri instead of default $url
        rewrite ^ $request_uri;

        location ~* ^/https?://web[.]archive[.]org/(.*) {
            proxy_set_header Host web.archive.org;
            proxy_pass http://ia/$1$is_args$args;
        }

        location ~* ^/(https?://)([^/]+)(/(.*)) {
            proxy_set_header Host $2;
            proxy_pass $1$2$3$is_args$args;
        }
    }
}


