# Webrecorder Env
# This file contains deployment specific params

# Default storage (local, s3, etc...)
DEFAULT_STORAGE=local

# If invites are required before registration
# If false, users can register directly
REQUIRE_INVITES=false

# Host settings
# set to use specific host for content and app
# recommended for security
# ============================
APP_HOST=
CONTENT_HOST=

# Rate limiting for anon users
# (0 = disabled, no rate limiting)
# If both > 0,  users can record upto RATE_LIMIT_MAX bytes
# over RATE_LIMIT_HOURS
RATE_LIMIT_MAX=0
RATE_LIMIT_HOURS=0

# S3 Options (onlt if using S3)
# =============================

# S3 Path to where WARC data will be stored (only if using s3)
S3_ROOT=s3://bucket/path/

# S3 Creds (only if using S3)
AWS_ACCESS_KEY_ID=ACCESS_KEY
AWS_SECRET_ACCESS_KEY=SECRET_KEY

# Email settings -- for confirmation / invite e-mails
# =============================

# Webrecorder automated emails
EMAIL_SENDER=test@localhost

# Email for received "Doesn't Look Right"
# set to enable email notifications
SUPPORT_EMAIL=

# SMTP URL for email (see Bottle Cork docs for supported SMTP URL formats: http://cork.firelet.net/howto.html)

# Using local service in Docker "mailserver" container
EMAIL_SMTP_URL=smtp://test@localhost:archive@webrecorder_mailserver_1:25

# SSL SMTP Example: if using an external service, can use the SSL form, as follows
#EMAIL_SMTP_URL=ssl://user@host:password@smtp.example.com:465

# Mailing list -- optional 3rd party mailing list management (e.g. Mailchimp)
# =============================
# Flag to enable
MAILING_LIST=false

# API endpoint
MAILING_LIST_ENDPOINT=

# Flag to turn on mailing list removal on account deletion
REMOVE_ON_DELETE=false

# API removal endpoint taking a md5 hash of the email as a template argument
MAILING_LIST_REMOVAL=$MAILING_LIST_ENDPOINT/{0}

# API key
MAILING_LIST_KEY=

# JSON API payload with python template formatting, available feilds: email, name, username
MAILING_LIST_PAYLOAD={{"email_address":"{email}","status":"subscribed"}}

# GitHub Bug Reports
# Set these to add bug reports as issues in designated github repo
#GH_ISSUE_AUTH=<username>:<token-or-password>
#GH_ISSUE_REPO=<owner>/<repo>

# Redis
# ==============================
# Redis Urls for reading, and redis server for master
# Change from "redis_1" if using a remote redis server, outside Docker
REDIS_BASE_URL=redis://redis:6379/1
REDIS_BROWSER_URL=redis://redis:6379/0
REDIS_SESSION_URL=redis://redis:6379/0

# Container Hosts
WEBAGG_HOST=http://webagg:8080
RECORD_HOST=http://recorder:8010

# Nginx Cache proxy (for remote content)
CACHE_PROXY_URL=http://nginx:1210/


# Record Root
RECORD_ROOT=/data/warcs/

# Session Keys
# ==============================

# Run the init-default.sh script to generate random for these values

SECRET_KEY=<change me to a random value>
ENCRYPT_KEY=<change me to a random value>
VALIDATE_KEY=<change me to a random value>
